{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"name":"exp_max_algorithm","provenance":[]}},"cells":[{"cell_type":"markdown","metadata":{"_uuid":"1527cec278f530e10d5cc4356bfcd1121422bd34","id":"9WX_WyQa6YGw"},"source":["<a id='sec3'></a>\n","# Expectation Maximization Algorithm\n","\n"]},{"cell_type":"markdown","metadata":{"_uuid":"2c4a77cfebf99a55462a377ad2930fa6f05eefde","id":"vjchKnva6YGx"},"source":["<a id='sec31'></a>\n","## Gaussian Mixture Model of 2 Gaussians\n"]},{"cell_type":"code","metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","id":"HnZTWnF_6YGx","outputId":"021554f1-b4eb-4f64-b08b-14181e3eebfc"},"source":["# import libraries\n","\n","# For plotting\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","sns.set_style(\"white\")\n","%matplotlib inline\n","#for matrix math\n","import numpy as np\n","#for normalization + probability density function computation\n","from scipy import stats\n","#for data preprocessing\n","import pandas as pd\n","from math import sqrt, log, exp, pi\n","from random import uniform\n","print(\"import done\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["import done\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"598f2539ced3f159ba773bb33b0e3456c00739ce","id":"bDor3Pb_6YG0"},"source":["![](http://)# Generate the data yourself \n","Select $\\mu_1, \\sigma_1$ and $\\mu_2, \\sigma_2$ to generate the data\n"]},{"cell_type":"code","metadata":{"_uuid":"fc48f5c29294186a1a6a09408e6d7e108653aa4d","id":"ZRTcd1xP6YG1","outputId":"60dbbae9-da12-4823-a342-6980a4c91c55"},"source":["random_seed=36788765\n","np.random.seed(random_seed)\n","\n","Mean1 = 2.0  # Input parameter, mean of first normal probability distribution\n","Standard_dev1 = 4.0\n","Mean2 = 9.0 # Input parameter, mean of second normal  probability distribution\n","Standard_dev2 = 2.0\n","\n","# generate data\n","y1 = np.random.normal(Mean1, Standard_dev1, 1000)\n","y2 = np.random.normal(Mean2, Standard_dev2, 500)\n","data=np.append(y1,y2)\n","\n","# For data visiualisation calculate left and right of the graph\n","Min_graph = min(data)\n","Max_graph = max(data)\n","x = np.linspace(Min_graph, Max_graph, 2000) # to plot the data\n","\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n","sns.distplot(data, bins=20, kde=False);"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Input Gaussian 1: μ = 2.0, σ = 4.0\n","Input Gaussian 2: μ = 9.0, σ = 2.0\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"_uuid":"8396cbb53bd12807ec38d131bf17bc78d0ab5fbc","id":"K9_ApTWA6YG2","outputId":"830d8b8a-d5bd-4378-f8ba-27b45273167f"},"source":["class Gaussian:\n","    \"Model univariate Gaussian\"\n","    def __init__(self, mu, sigma):\n","        #mean and standard deviation\n","        self.mu = mu\n","        self.sigma = sigma\n","\n","    #probability density function\n","    def pdf(self, datum):\n","        \"Probability of a data point given the current parameters\"\n","        u = (datum - self.mu) / abs(self.sigma)\n","        y = (1 / (sqrt(2 * pi) * abs(self.sigma))) * exp(-u * u / 2)\n","        return y\n","    \n","    def __repr__(self):\n","        return 'Gaussian({0:4.6}, {1:4.6})'.format(self.mu, self.sigma)\n","print(\"done\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["done\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"_uuid":"09fe1994901d7ac9a130698c4148cb00b5c4b1da","id":"qhjNHHxq6YG3"},"source":["<a id='sec32'></a>\n","## A single Gaussion will not fit the data well\n"]},{"cell_type":"code","metadata":{"_uuid":"d206d152f8682ae4117a0d436c04747c1095897c","id":"KmuB5Oic6YG4","outputId":"de7a1de0-16e0-40b6-cebd-ab3391383b0c"},"source":["#gaussian of best fit\n","best_single = Gaussian(np.mean(data), np.std(data))\n","print('Best single Gaussian: μ = {:.2}, σ = {:.2}'.format(best_single.mu, best_single.sigma))\n","#fit a single gaussian curve to the data\n","g_single = stats.norm(best_single.mu, best_single.sigma).pdf(x)\n","sns.distplot(data, bins=20, kde=False, norm_hist=True);\n","plt.plot(x, g_single, label='single gaussian');\n","plt.legend();"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Best single Gaussian: μ = 4.4, σ = 4.8\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"_uuid":"be42e26212b2227bde625a210bc11710972bb303","id":"GXdX-j9o6YG5"},"source":["<a id='sec4'></a>\n","# The code for EM with 2 Gaussian mixture model"]},{"cell_type":"code","metadata":{"_uuid":"605def3ac170f3f8d1892aa54866b17412a1709c","id":"LXMCADyW6YG6","outputId":"b960c113-9df8-43e0-fc39-52c3f2a2c0b2"},"source":["class GaussianMixture_self:\n","    \"Model mixture of two univariate Gaussians and their EM estimation\"\n","\n","    def __init__(self, data, mu_min=min(data), mu_max=max(data), sigma_min=1, sigma_max=1, mix=.5):\n","        self.data = data\n","        #todo the Algorithm would be numerical enhanced by normalizing the data first, next do all the EM steps and do the de-normalising at the end\n","        \n","        #init with multiple gaussians\n","        self.one = Gaussian(uniform(mu_min, mu_max), \n","                            uniform(sigma_min, sigma_max))\n","        self.two = Gaussian(uniform(mu_min, mu_max), \n","                            uniform(sigma_min, sigma_max))\n","        \n","        #as well as how much to mix them\n","        self.mix = mix\n","\n","    def Estep(self):\n","        \"Perform an E(stimation)-step, assign each point to gaussian 1 or 2 with a percentage\"\n","        # compute weights\n","        self.loglike = 0. # = log(p = 1)\n","        for datum in self.data:  \n","            # unnormalized weights\n","            wp1 = self.one.pdf(datum) * self.mix\n","            wp2 = self.two.pdf(datum) * (1. - self.mix)\n","            # compute denominator\n","            den = wp1 + wp2\n","            # normalize\n","            wp1 /= den   \n","            wp2 /= den     # wp1+wp2= 1, it either belongs to gaussian 1 or gaussion 2\n","            # add into loglike\n","            self.loglike += log(den) #freshening up self.loglike in the process\n","            # yield weight tuple\n","            yield (wp1, wp2)\n","\n","    def Mstep(self, weights):\n","        \"Perform an M(aximization)-step\"\n","        # compute denominators\n","        (left, rigt) = zip(*weights) \n","        one_den = sum(left)\n","        two_den = sum(rigt)\n","\n","        # compute new means\n","        self.one.mu = sum(w * d  for (w, d) in zip(left, data)) / one_den\n","        self.two.mu = sum(w * d  for (w, d) in zip(rigt, data)) / two_den\n","        \n","        # compute new sigmas\n","        self.one.sigma = sqrt(sum(w * ((d - self.one.mu) ** 2)\n","                                  for (w, d) in zip(left, data)) / one_den)\n","        self.two.sigma = sqrt(sum(w * ((d - self.two.mu) ** 2)\n","                                  for (w, d) in zip(rigt, data)) / two_den)\n","        # compute new mix\n","        self.mix = one_den / len(data)\n","\n","        \n","    def iterate(self, N=1, verbose=False):\n","        \"Perform N iterations, then compute log-likelihood\"\n","        for i in range(1, N+1):\n","            self.Mstep(self.Estep()) #The heart of the algorith, perform E-stepand next M-step\n","            if verbose:\n","                print('{0:2} {1}'.format(i, self))\n","        self.Estep() # to freshen up self.loglike\n","\n","    def pdf(self, x):\n","        return (self.mix)*self.one.pdf(x) + (1-self.mix)*self.two.pdf(x)\n","        \n","    def __repr__(self):\n","        return 'GaussianMixture({0}, {1}, mix={2.03})'.format(self.one, \n","                                                              self.two, \n","                                                              self.mix)\n","\n","    def __str__(self):\n","        return 'Mixture: {0}, {1}, mix={2:.03})'.format(self.one, \n","                                                        self.two, \n","                                                        self.mix)\n","print(\"done\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["done\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"quclEX_U6YG6"},"source":["<a id='sec41'></a>\n","## See the algorithm in action"]},{"cell_type":"code","metadata":{"_uuid":"37cb2937ff2a86a94f9687ec28373c8c13c813d6","id":"jWwNbRZo6YG7","outputId":"05177354-9a29-44b3-9947-28c201ce4f59"},"source":["# See the algorithm in action\n","n_iterations = 20\n","best_mix = None\n","best_loglike = float('-inf')\n","mix = GaussianMixture_self(data)\n","for _ in range(n_iterations):\n","    try:\n","        #train!\n","        mix.iterate(verbose=True)\n","        if mix.loglike > best_loglike:\n","            best_loglike = mix.loglike\n","            best_mix = mix\n","        \n","    except (ZeroDivisionError, ValueError, RuntimeWarning): # Catch division errors from bad starts, and just throw them out...\n","        print(\"one less\")\n","        pass\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" 1 Mixture: Gaussian(1.15658, 3.2362), Gaussian(8.98865, 1.92154), mix=0.58)\n"," 1 Mixture: Gaussian(1.32133, 3.44712), Gaussian(8.86143, 2.09164), mix=0.585)\n"," 1 Mixture: Gaussian(1.40173, 3.54995), Gaussian(8.78906, 2.16865), mix=0.587)\n"," 1 Mixture: Gaussian(1.44954, 3.6083), Gaussian(8.74735, 2.21024), mix=0.589)\n"," 1 Mixture: Gaussian(1.48091, 3.64426), Gaussian(8.72301, 2.23423), mix=0.59)\n"," 1 Mixture: Gaussian(1.50294, 3.66769), Gaussian(8.70896, 2.24837), mix=0.591)\n"," 1 Mixture: Gaussian(1.5193, 3.68366), Gaussian(8.70124, 2.25664), mix=0.592)\n"," 1 Mixture: Gaussian(1.53207, 3.69501), Gaussian(8.69746, 2.2613), mix=0.593)\n"," 1 Mixture: Gaussian(1.5425, 3.70341), Gaussian(8.69618, 2.26368), mix=0.594)\n"," 1 Mixture: Gaussian(1.55137, 3.70989), Gaussian(8.69648, 2.26462), mix=0.594)\n"," 1 Mixture: Gaussian(1.55917, 3.71511), Gaussian(8.69778, 2.26465), mix=0.595)\n"," 1 Mixture: Gaussian(1.56621, 3.71948), Gaussian(8.6997, 2.2641), mix=0.596)\n"," 1 Mixture: Gaussian(1.57269, 3.72326), Gaussian(8.70199, 2.26319), mix=0.596)\n"," 1 Mixture: Gaussian(1.57877, 3.72664), Gaussian(8.7045, 2.26206), mix=0.597)\n"," 1 Mixture: Gaussian(1.58452, 3.72972), Gaussian(8.70711, 2.26079), mix=0.598)\n"," 1 Mixture: Gaussian(1.59001, 3.73258), Gaussian(8.70978, 2.25946), mix=0.598)\n"," 1 Mixture: Gaussian(1.59527, 3.73528), Gaussian(8.71244, 2.2581), mix=0.599)\n"," 1 Mixture: Gaussian(1.60035, 3.73785), Gaussian(8.71508, 2.25673), mix=0.6)\n"," 1 Mixture: Gaussian(1.60525, 3.7403), Gaussian(8.71767, 2.25537), mix=0.6)\n"," 1 Mixture: Gaussian(1.60999, 3.74267), Gaussian(8.72021, 2.25403), mix=0.601)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_e7jqQeH6YG8"},"source":["<a id='sec42'></a>\n","## Find best Mixture Gaussian model"]},{"cell_type":"code","metadata":{"_uuid":"f54ecb1bd2e5bb370c80b1c1d6f5bdcebf3eb076","id":"dQPceRH26YG8","outputId":"e5a3124c-c54d-4aaf-c83c-8612d459e452"},"source":["# Find best Mixture Gaussian model\n","n_iterations = 300\n","n_random_restarts = 4\n","best_mix = None\n","best_loglike = float('-inf')\n","print('Computing best model with random restarts...\\n')\n","for _ in range(n_random_restarts):\n","    mix = GaussianMixture_self(data)\n","    for _ in range(n_iterations):\n","        try:\n","            mix.iterate()\n","            if mix.loglike > best_loglike:\n","                best_loglike = mix.loglike\n","                best_mix = mix\n","        except (ZeroDivisionError, ValueError, RuntimeWarning): # Catch division errors from bad starts, and just throw them out...\n","            pass\n","#print('Best Gaussian Mixture : μ = {:.2}, σ = {:.2} with μ = {:.2}, σ = {:.2}'.format(best_mix.one.mu, best_mix.one.sigma, best_mix.two.mu, best_mix.two.sigma))\n","\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n","print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(\"1\", best_mix.one.mu, best_mix.one.sigma, best_mix.mix))\n","print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(\"2\", best_mix.two.mu, best_mix.two.sigma, (1-best_mix.mix)))\n","#Show mixture\n","sns.distplot(data, bins=20, kde=False, norm_hist=True);\n","g_both = [best_mix.pdf(e) for e in x]\n","plt.plot(x, g_both, label='gaussian mixture');\n","g_left = [best_mix.one.pdf(e) * best_mix.mix for e in x]\n","plt.plot(x, g_left, label='gaussian one');\n","g_right = [best_mix.two.pdf(e) * (1-best_mix.mix) for e in x]\n","plt.plot(x, g_right, label='gaussian two');\n","plt.legend();\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Computing best model with random restarts...\n","\n","Input Gaussian 1: μ = 2.0, σ = 4.0\n","Input Gaussian 2: μ = 9.0, σ = 2.0\n","Gaussian 1: μ = 1.8, σ = 3.8, weight = 0.62\n","Gaussian 2: μ = 8.8, σ = 2.2, weight = 0.38\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"_uuid":"fab10e6ee3acf1b9d35e766f9300225b9cfb2a7c","id":"jClYaJev6YG-"},"source":["<a id='sec43'></a>\n","## Results\n"]},{"cell_type":"code","metadata":{"_uuid":"8d2203f981d40741f39d9552f45baba450171b65","id":"DMF3uI0x6YG-","outputId":"6528147e-fd9c-45a8-c0af-002ecaf9178d"},"source":["from sklearn.mixture import GaussianMixture\n","gmm = GaussianMixture(n_components = 2, tol=0.000001)\n","gmm.fit(np.expand_dims(data, 1)) # Parameters: array-like, shape (n_samples, n_features), 1 dimension dataset so 1 feature\n","Gaussian_nr = 1\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n","print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n","for mu, sd, p in zip(gmm.means_.flatten(), np.sqrt(gmm.covariances_.flatten()), gmm.weights_):\n","    print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(Gaussian_nr, mu, sd, p))\n","    g_s = stats.norm(mu, sd).pdf(x) * p\n","    plt.plot(x, g_s, label='gaussian sklearn');\n","    Gaussian_nr += 1\n","sns.distplot(data, bins=20, kde=False, norm_hist=True)\n","gmm_sum = np.exp([gmm.score_samples(e.reshape(-1, 1)) for e in x]) #gmm gives log probability, hence the exp() function\n","plt.plot(x, gmm_sum, label='gaussian mixture');\n","plt.legend();"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Input Gaussian 1: μ = 2.0, σ = 4.0\n","Input Gaussian 2: μ = 9.0, σ = 2.0\n","Gaussian 1: μ = 1.7, σ = 3.8, weight = 0.61\n","Gaussian 2: μ = 8.8, σ = 2.2, weight = 0.39\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}